[
    {
        "content": "<p>Anyone have recommendations for software (like say Prover9) that might let me experiment with for conjectures in category theory?  More precisely, say I have a conjecture about equality of some morphisms in a new kind of category (ex: with a couple of monoidal structures, an involution, a couple more gadgets), and fiddling on paper leads nowhere. I'd like to throw this at an automated tool, just to see.</p>\n<p>Most automated provers are untyped, which makes reasoning about morphisms hell (partiality is not fun, especially when you know for a fact that it's all total). Advice?</p>\n<p>I've been thinking of seeing if something like one of Isabelle's sledgehammers might help. At least that would mostly hide the lack of types from me. But I find encoding category theory in HOL tedious, compared with doing it in dependent type theory, so I'm a little loath to pursue that route. [Plus I can only read Isabelle/HOL right now, I've never written any!]</p>",
        "id": 307360004,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667322467
    },
    {
        "content": "<p>Have you seen the work of Hamana on SOL (one paper with several examples is <a href=\"https://www.cambridge.org/core/journals/journal-of-functional-programming/article/how-to-prove-decidability-of-equational-theories-with-secondorder-computation-analyser-sol/82CDDB6C015422563D5043CFABC677BC\">this one</a>)? I've not yet tried it myself, but it seems pretty powerful.</p>",
        "id": 307398251,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1667334615
    },
    {
        "content": "<p>I had not! Thanks, that does look intriguing.</p>",
        "id": 307406806,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667338222
    },
    {
        "content": "<p>I've experimented with using Prover9  (and mace4) to prove category theory statements. You can see some of my mace files <a href=\"https://github.com/punkdit/pyfinder/tree/master/pyfinder/theories\">here</a>. I was aiming to formalize rig categories, but I eventually gave up. It's pretty tricky, mainly because composition is a partial operation. The usual way to get around this is to have an \"undefined\" object, and this ends up polluting every (or most) predicates...</p>",
        "id": 307727628,
        "sender_full_name": "Simon Burton",
        "timestamp": 1667481953
    },
    {
        "content": "<p>I think the Connexus tool <em>can</em> be used in this way, as a theorem prover for working with finite presentations of categories</p>",
        "id": 307763153,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1667491159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277321\">@Simon Burton</span> you do know that <code>agda-categories</code> does have a formalization of rig categories?</p>\n<p>I was definitely afraid that \"losing the types\" would end up being a nightmare. This is what I learned from <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> 's experience <a href=\"https://www.philipzucker.com/category-theory-in-the-e-automated-theorem-prover/\">with E</a> and experiments <a href=\"https://www.philipzucker.com/notes-on-synthesis-and-equation-proving-for-catlab-jl/\">around Catlab</a>.   Christoph Benzmuller's <a href=\"http://aitp-conference.org/2018/slides/CBDS.pdf\">experiments</a> did not fill me with hope either!  But then, this morning, I saw the paper <a href=\"https://hal.inria.fr/hal-03814635/document\">Seventeen Provers under the Hammer</a> which gave me renewed hope.</p>",
        "id": 307800101,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667496724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> Thanks - but I'm not really working on presentations of categories, rather I'm trying to prove some equalities in something akin to special dagger rig categories. Specifically whether a model we've constructed satisfies axioms C1-C20 that Selinger et al enumerate on p.3 of <a href=\"https://arxiv.org/abs/2204.02217\">this paper</a>.</p>",
        "id": 307800996,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667496975
    },
    {
        "content": "<p>FYI The line of thinking that was kicked off by those experiments is still progressing. There is a new system in the works <a href=\"https://github.com/mwillsey/egg-smol\">https://github.com/mwillsey/egg-smol</a> (publication in progress, still not really intended for external users quite yet) that can be seen as a much more powerful and performant version of this prototype <a href=\"https://www.philipzucker.com/egglog/\">https://www.philipzucker.com/egglog/</a> in collaboration with some of the egg people at UW. The system is heavily based in the idea of partial functions, datalog, and equational (egraph based) rewriting with sophisticated guard conditions. Proof production is definitely in the roadmap and people are flirting with the question of how to do a sound CAS. I've also been wondering if I should revisit my E/Vampire encodings in light of a year or two of more experience. I think heavily leaning into a Maybe monad style encoding to make everything partial could work, especially with a metaprogramming environment to make it  less burdensome. I know of a group of people attempting to integrate egg1 into lean and another into coq, but I am unaware of anyone trying to do something similar for Agda, which I know is your playground. Would be interested to understand good example problems in rig categories or otherwise if they are digestible by a mere mortal like myself, as we are always seeking more good applications of these systems.</p>",
        "id": 307810856,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1667499936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> We're in the middle of a paper where we need to see if C1-C20 of Selinger's paper (see link in response to Jules) hold. I think you'll get a good idea of the scope by just reading pages 1-3 of that paper.</p>",
        "id": 307830847,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667506683
    },
    {
        "content": "<p>If I'm reading this correctly, It is a pure group? Do you need n&gt;2 or where n changes?</p>",
        "id": 307833962,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1667507762
    },
    {
        "content": "<p>For that part, yes, actually, it is just the group. I've been so used to the general case that I did not notice that for this part, that's all we need. [We eventually want n&gt;2, but n=2  is already hard.]</p>",
        "id": 307898091,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667547377
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296322\">Jacques Carette</span> <a href=\"#narrow/stream/229125-practice.3A-software/topic/Automated.20proving.3F/near/307800101\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"277321\">Simon Burton</span> you do know that <code>agda-categories</code> does have a formalization of rig categories?<br>\n...</p>\n</blockquote>\n<p>Thanks for that overview. I did review the work done in agda. One thing that's fun about using Prover9 is that the sister program mace4 looks for models that provide a counterexample to statements. But I see now that I ran into many of the same issues that <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> <a href=\"https://www.philipzucker.com/category-theory-in-the-e-automated-theorem-prover/\">had</a>: \"<em>Just because it says proved is not very convincing. It is very easy to have your axioms and/or conjecture stated incorrectly. Forall ! and Exists ? bind tighter than I naively expect them to in the syntax. I ended up putting parenthesis nearly everywhere. I had a lot of very difficult to debug problems due to bad binding assumptions.</em>\"</p>\n<p>Proving things in CT is often as easy as falling off a log. The arrows already tell you what to do. So the feeling is that a prover tailored to CT should work well. Even classical logic seems to be overkill for most CT, we only need very weak logic. Coherence results are more subtle, those are more like proving confluence of a rewrite system. But otherwise, we should be able to solve the word problem in various free higher-categories, such as a monoidal bicategory. Using stuff like Lean just seems like an impedance mismatch. So anyway, I'm pretty excited to see other people are working on this. I should probably let the professionals sort it out and stop shooting myself in the foot repeatedly, even though I still have some foot leftover...</p>",
        "id": 307928736,
        "sender_full_name": "Simon Burton",
        "timestamp": 1667559047
    },
    {
        "content": "<p>Yeah, I might get around to working on that. Might happen in the second quarter of 2023 even.</p>",
        "id": 307944355,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1667564640
    }
]