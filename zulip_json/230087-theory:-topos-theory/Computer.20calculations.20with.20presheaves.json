[
    {
        "content": "<p>Calculations with presheaves can be tricky, and I would often trust a computer more than myself in doing these calculations. Does anyone have suggestions regarding existing code for doing this kind of calculations?</p>\n<p>I'm thinking of code that can compute e.g. products, coproducts and most importantly (external) homs of presheaves.</p>\n<p>To keep it realistic, the categories on which you take presheaves can be very small, with only a few objects and morphisms. Similarly, the presheaves can be very small, with say at most 5 or 6 sections over each object.</p>",
        "id": 199132887,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590745018
    },
    {
        "content": "<p>Lean could certainly in theory do that sort of calculation, although it's not going to be particularly user friendly. I imagine other proof assistants (e.g. Agda) would work just as well.</p>",
        "id": 199136022,
        "sender_full_name": "Thomas Read",
        "timestamp": 1590747396
    },
    {
        "content": "<p>Thanks for the reply. I don't have much experience with Lean. With \"computing external homs\", I mean that I want to generate a list of all natural transformations from the first presheaf to the second one. My impression is that proof assistants don't do this kind of work for you.</p>",
        "id": 199136741,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590748006
    },
    {
        "content": "<p>I <em>think</em> that if everything is nice and finite it should be able to automagically do that, and if it can't then someone will probably fix the definitions so that it can. If you're interested in this route you should ask on the Lean zulip (<a href=\"https://leanprover.zulipchat.com/\">https://leanprover.zulipchat.com/</a>) - they're unreasonably friendly over there! (or <span class=\"user-mention\" data-user-id=\"276111\">@Bhavik Mehta</span>  would probably know, if he's around)</p>",
        "id": 199139155,
        "sender_full_name": "Thomas Read",
        "timestamp": 1590750087
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 199139371,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1590750226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"275965\">@Evan Patterson</span>  <span class=\"user-mention\" data-user-id=\"275927\">@James Fairbanks</span> Would catlab.jl be able to do such a thing?</p>",
        "id": 199156351,
        "sender_full_name": "Philip Zucker",
        "timestamp": 1590760189
    },
    {
        "content": "<p>hmm, i feel like ive heard that lean has weird computational behavior</p>",
        "id": 199690514,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591227470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282722\">Jens Hemelaer</span> <a href=\"#narrow/stream/230087-theory.3A-topos.20theory/topic/Computer.20calculations.20with.20presheaves/near/199136741\">said</a>:</p>\n<blockquote>\n<p>Thanks for the reply. I don't have much experience with Lean. With \"computing external homs\", I mean that I want to generate a list of all natural transformations from the first presheaf to the second one. My impression is that proof assistants don't do this kind of work for you.</p>\n</blockquote>\n<p>for type-theory based proof assistants, at least, whether they do this kind of work for you isn't a simple yes-no</p>",
        "id": 199690685,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591227607
    },
    {
        "content": "<p>most type theoretic proof assistants are built on systems with intrinsic computational content, where terms that you write down can be simplified into more explicit forms</p>",
        "id": 199690975,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591227864
    },
    {
        "content": "<p>in a maximally nice system with \"canonicalization\" properties, such as the calculus of inductive constructions (which is what coq is supposed to implement), each well-typed term can be computed down to a \"canonical\" form, where what \"canonical\" means is a bit technical and depends on what type you're talking about, but e.g., for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> it's gonna be an expression that's just a numeral</p>",
        "id": 199691158,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228053
    },
    {
        "content": "<p>iirc, lean is also based on the calculus of inductive constructions, but i've heard that it breaks some of the system's computational properties somehow...? maybe not many of those breakages crop up in realistic scenarios, but i dont use lean</p>",
        "id": 199691304,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228174
    },
    {
        "content": "<p>but so this kind of type-theoretic proof assistant <em>does</em> sort of do this kind of work for you, insofar as you write down a formula for something and then it can compute out a fully explicit representation of the thing (at least in theory—mathematical styles of definition often do not lend themselves well to efficient computation)</p>",
        "id": 199691691,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228498
    },
    {
        "content": "<p>but on the other hand, they also sort of <em>don't</em> do the kind of work you're asking about for you, because the devil is in the details of what \"fully explicit representation\" means and what kind of  object you're talking about</p>",
        "id": 199691774,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228555
    },
    {
        "content": "<p>if you're doing combinatorics, and the objects in question are natural numbers, then a fully explicit representation is a numeral, and this is indeed what you're probably looking for as a result of a computation</p>",
        "id": 199691876,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228632
    },
    {
        "content": "<p>but what you asked about is a hom-set!</p>",
        "id": 199691906,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228678
    },
    {
        "content": "<p>and sets are fucked up!</p>",
        "id": 199691950,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228691
    },
    {
        "content": "<p>the representation you're probably looking for is probably an expression like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{a, b, c\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">}</span></span></span></span>—but this is <em>not</em> the kind of \"fully explicit representation\" that a system like CIC guarantees you</p>",
        "id": 199692013,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228788
    },
    {
        "content": "<p>so in that sense, coq will not compute a <em>list</em> of natural transformations for you, indeed—but that's less about coq not computing things for you, and more about the facts that</p>\n<ol>\n<li>categories have hom-<em>sets</em>, not hom-<em>lists</em>;</li>\n<li>constructively, sets are <em>extremely</em> different from lists</li>\n</ol>",
        "id": 199692231,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591228929
    },
    {
        "content": "<p>I don't know if I'd say it'll compute it for you. You'll have to do quite a bit of work to make it happen.</p>",
        "id": 199692428,
        "sender_full_name": "Dan Doel",
        "timestamp": 1591229105
    },
    {
        "content": "<p>Like, I wouldn't be surprised if the original asker is disappointed in how much Coq actually does toward the problem. :)</p>",
        "id": 199692538,
        "sender_full_name": "Dan Doel",
        "timestamp": 1591229245
    },
    {
        "content": "<p>Unless there is some library that someone has already written.</p>",
        "id": 199692605,
        "sender_full_name": "Dan Doel",
        "timestamp": 1591229288
    },
    {
        "content": "<p>shhhhhhhhhhhhhhhhh</p>",
        "id": 199693137,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591229802
    },
    {
        "content": "<p>dan you'd make a terrible salesperson</p>",
        "id": 199693143,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591229809
    },
    {
        "content": "<p>=)</p>",
        "id": 199693147,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591229814
    },
    {
        "content": "<p>I only know of the very old now Computational Category Theory project for this: <a href=\"http://www.cs.man.ac.uk/~david/categories/#:~:text=Computational%20Category%20Theory%20is%20an,it%20was%20developed%20by%20D\">http://www.cs.man.ac.uk/~david/categories/#:~:text=Computational%20Category%20Theory%20is%20an,it%20was%20developed%20by%20D</a>.</p>\n<p>I've tried reimplementing some scraps of some stuff for myself, but never systematically gone through and thought about the question. Even the question \"what is the optimal representation for actually computing on a category\" is relatively nonobvious.</p>",
        "id": 199693944,
        "sender_full_name": "Gershom",
        "timestamp": 1591230602
    },
    {
        "content": "<p>Lean or any proof assistant won't do anything for you here. If you work axiomatically, you'll get axiomatic results rather than enumerations. It will let you check that your code that you claim computes a thing actually computes the thing, but that's more work, not less!</p>",
        "id": 199694004,
        "sender_full_name": "Gershom",
        "timestamp": 1591230653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276026\">Philip Zucker</span> <a href=\"#narrow/stream/230087-theory.3A-topos.20theory/topic/Computer.20calculations.20with.20presheaves/near/199156351\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275965\">Evan Patterson</span>  <span class=\"user-mention silent\" data-user-id=\"275927\">James Fairbanks</span> Would catlab.jl be able to do such a thing?</p>\n</blockquote>\n<p>I'm late to the party here, but no <span class=\"user-mention\" data-user-id=\"276026\">@Philip Zucker</span> , currently Catlab cannot do this. However, I'd really like to have it! This is bread-and-butter stuff for category theory, with lots of potential uses.</p>\n<p>I'm starting to think about it. Like <span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> says, probably the most important part is getting the data structures right. If anyone has thoughts on this, I'd love to hear them.</p>",
        "id": 199694438,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1591231125
    },
    {
        "content": "<p>The representation in Computational Category Theory is (in haskell-speak): data Category o a = {s : a -&gt; o, t : a -&gt; o, compose : a -&gt; a -&gt; a, id : a -&gt; a}. This is relatively similar to a reified record of the category typeclass in haskell. It is nice to represent concrete categories with, but in my experience it is wrong to actually compute categorical constructions on. There I think you want something monotyped, with an explicit set of objects, and some subset of explicit morphisms given as pairs. I've done something similar for posets, and for categories, you just need to lift some invariants! Now computing can be done easily but inefficiently just by enumerating and checking (i.e. translating quantified formulae, etc).</p>",
        "id": 199694770,
        "sender_full_name": "Gershom",
        "timestamp": 1591231485
    },
    {
        "content": "<p>This works, but blows up in complexity fast, and you want either better algos, or a more efficient representation, or both, and I don't know how much work has been devoted to this.</p>",
        "id": 199694793,
        "sender_full_name": "Gershom",
        "timestamp": 1591231526
    },
    {
        "content": "<p>Ah yes, Catlab has essentially the same data structure for categories (and similar ones for other categorical structures, via a generic system for such). I agree that it is useful for certain purposes, but not really for doing computations and inferences within finitely presented categories. For that, I figure that a graph-style representation of some kind would be more useful. </p>\n<p>Then there is the question of data structures for presheaves. If you have the presheaf category of graphs, then people know all sorts of useful representations (adjacency list, adjacency matrix, etc.) Can such data structures be created generically, for any category of presheaves on a finitely presented category?</p>",
        "id": 199695238,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1591232052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276650\">@Gershom</span> re: checking that your code computing a thing computes the thing—i think there may be some merit to, like, reflection-y stuff here perhaps</p>",
        "id": 199696249,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233395
    },
    {
        "content": "<p>anyway uh</p>",
        "id": 199696254,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233408
    },
    {
        "content": "<p>i bet if you formalized finite categories in coq, all of this stuff would compute very nicely</p>",
        "id": 199696265,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233432
    },
    {
        "content": "<p>like, bishop-finite</p>",
        "id": 199696269,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233442
    },
    {
        "content": "<p>well... i guess proving that all of the constructions result in new bishop-finite things is basically where youre implementing the computation, but</p>",
        "id": 199696321,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233488
    },
    {
        "content": "<p>on the other hand, there's some existing library work on dealing with proving that types are bishop-finite?</p>",
        "id": 199696329,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233507
    },
    {
        "content": "<p>:)</p>",
        "id": 199696330,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591233509
    },
    {
        "content": "<p>Right, so in Lean (and I assume Coq also) it's easy to imagine writing something that could automatically derive <code>fintype</code> for everything in sight, and then run it and get back a list of all the things. Of course it would be atrociously slow if defined naively. A lot more interesting, and also probably possible, is to export an encoding of the things as a SAT/SMT instance, and hand it to an external solver, and hopefully get a list of the things in a practical amount of time.</p>",
        "id": 199697519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591235175
    },
    {
        "content": "<p>thank you for sharing.</p>",
        "id": 199701611,
        "sender_full_name": "eric brunner-williams (uoregon)",
        "timestamp": 1591241092
    },
    {
        "content": "<p>Great points Evan. Here is an interesting post on graphs and categories: <a href=\"https://golem.ph.utexas.edu/category/2011/03/which_graphs_can_be_given_a_ca.html\">https://golem.ph.utexas.edu/category/2011/03/which_graphs_can_be_given_a_ca.html</a></p>\n<p>I think this relates to <span class=\"user-mention\" data-user-id=\"296322\">@Jacques Carette</span>'s question about the relationship between Cat and Quiv the other day. I'm not actually sure if every finitely presented category is the free category on some quiver. Perhaps the proper statement is \"is equivalent to\"? If we have something like that, then we would want to represent categories of N many objects as NxN matrixes under free completion, and we could proceed from there. (Hah, and now all <span class=\"user-mention\" data-user-id=\"276037\">@Jade Master</span>'s stuff about generalized floyd-warshall immediately comes into play, because this is the same as determining the hom between two objects). It would be fun to code this up, and then to consider how one might \"read off\" from this data, e.g. the existence of a specific limit or other universal object as a path minimization question.</p>\n<p>In this setting would functors be some form of linear maps?</p>",
        "id": 199704977,
        "sender_full_name": "Gershom",
        "timestamp": 1591246196
    },
    {
        "content": "<p>Not every finitely presented category is the free category on a graph, but every such category is the <em>quotient</em> of a free category on a graph, by some finite set of equations. (David Spivak explains this nicely in his book on CT for the sciences, if you want to read about it.) So, even in the general case, I would expect the graph structure to be useful: it doesn't tell you how to deal with the equations, but it still tells you, by traversing the graph, how you can compose morphisms. As for Jade's intriguing new work, I need to get caught up on that!</p>",
        "id": 199706276,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1591247932
    },
    {
        "content": "<p>Also, thanks for the pointer to that interesting blog post.</p>",
        "id": 199706366,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1591248084
    },
    {
        "content": "<p>Ah, I see. E.g. if you have a one object graph, then you get the free monoid on the self loops, but you may want a monoid that has some extra relations. I suppose there is also a \"cofree\" category on a graph, which is terminal rather than initial with regards to categories on that graph, and in the monoid case this would be the setting where we identify all the arrows, so we get the terminal monoid. I imagine there's  perhaps  a \"categorical envelope\" as well, which sits in-between, which would be the smallest category such that the underlying graph coincides. (Would be some work to check if this actually exists). If it exists, that could be the right thing. We'd get it from treating \"categorical graphs\"(or something similar)  as a reflective subcategory of graphs, perhaps.</p>\n<p>Now I'm really interested in pursuing this! I can't find the phd thesis in the blog post, but here are some related articles by the author, though sadly I don't read french <a href=\"https://arxiv.org/search/math?searchtype=author&amp;query=Allouch%2C+S\">https://arxiv.org/search/math?searchtype=author&amp;query=Allouch%2C+S</a></p>",
        "id": 199707199,
        "sender_full_name": "Gershom",
        "timestamp": 1591249436
    },
    {
        "content": "<p>(also fun, and mentioned on the discussion, tho not terribly useful per se: <a href=\"http://www.reluctantm.com/gcruttw/publications/ams2014CruttwellCountingFiniteCats.pdf\">http://www.reluctantm.com/gcruttw/publications/ams2014CruttwellCountingFiniteCats.pdf</a> although it does suggest that a library for working only with cauchy complete categories might be more tractable)</p>",
        "id": 199707423,
        "sender_full_name": "Gershom",
        "timestamp": 1591249757
    },
    {
        "content": "<p>Interesting thought. I had never thought about whether there is a cofree category on a graph, but according to this <a href=\"https://math.stackexchange.com/q/802464/\">Math.SE question</a>, it does not exist.</p>",
        "id": 199707675,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1591250078
    },
    {
        "content": "<p>Hrm, what I suppose I was imagining wasn't a functor but just a function graph -&gt; cat that gave some category with the same objects, and as few morphisms as possible, but that's not necessarily that interesting. Essentially the motivation is just we want to represent \"as many categories as possible\" with \"as simple graphs as possible\" and I'm not worried about having a functor, necessarily, since the operations we perform on the underlying graphs need not correspond to the categorical operations in Graph. Anyway, it's all too vague right, now but the approach seems intriguing.</p>",
        "id": 199708695,
        "sender_full_name": "Gershom",
        "timestamp": 1591251120
    },
    {
        "content": "<p>the reflector/envelope thing seems perhaps more promising, if there's such a gadget.</p>",
        "id": 199708757,
        "sender_full_name": "Gershom",
        "timestamp": 1591251160
    },
    {
        "content": "<p>(perhaps this relates to sketches -- the categorical completion of a graph, the complete categorical completion, the categorical completion with products, etc)</p>",
        "id": 199708860,
        "sender_full_name": "Gershom",
        "timestamp": 1591251263
    },
    {
        "content": "<p>I asked in the Lean chat as <span class=\"user-mention\" data-user-id=\"276090\">@Thomas Read</span>  suggested, and the consensus seems to be that it is possible to do these calculations in Lean in theory, but the calculations will be very slow.</p>",
        "id": 199709385,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591251911
    },
    {
        "content": "<p>I already implemented what I wanted in Python. I should have posted the code here, but to be honest, I am a bit embarassed about the code quality. I will add some readability and then drop a link here.</p>",
        "id": 199709727,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591252298
    },
    {
        "content": "<p>Here is the code: <a href=\"https://jhemelae.github.io/images/Presheaves-Calc.pdf\">pdf file</a>, <a href=\"https://jhemelae.github.io/images/Presheaves-Calc.ipynb\">ipynb file (jupyter notebook)</a>.</p>",
        "id": 199715316,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591257521
    },
    {
        "content": "<p>Criticism welcome!</p>",
        "id": 199715825,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591257886
    },
    {
        "content": "<p>I should thank <span class=\"user-mention\" data-user-id=\"277473\">@Morgan Rogers</span> because he came up with the kind of calculations that I wanted to implement.</p>",
        "id": 199718940,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591260014
    },
    {
        "content": "<p>aww, i probably would've tried to coax coq into computing some of this in a day or two if you hadnt just gone and done it</p>",
        "id": 199720096,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591260793
    },
    {
        "content": "<p>...maybe i will anyway, i'm skeptical that it would be unusably slow</p>",
        "id": 199720121,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591260816
    },
    {
        "content": "<p>probably just unpleasantly slow :&gt;</p>",
        "id": 199720136,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591260826
    },
    {
        "content": "<p>I would be interested to see your approach. The python version is very fast with the tiny examples. But as soon as you make the categories larger, the Hom-sets blow up exponentially, and the code becomes unusable anyway.</p>",
        "id": 199720801,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1591261295
    },
    {
        "content": "<p>i wouldve probably tried hacking on it a bit earlier tbh</p>",
        "id": 199720940,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591261377
    },
    {
        "content": "<p>i just dont have a development environment set up rn—im on a new laptop</p>",
        "id": 199720963,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591261393
    },
    {
        "content": "<p>been procrastinating on getting things working</p>",
        "id": 199720994,
        "sender_full_name": "sarahzrf",
        "timestamp": 1591261406
    },
    {
        "content": "<p>A couple of thoughts occurred to me: the first is that there are algebra packages/languages that are good at counting algebraic structures; one could probably adapt something available in sage? I've only seen demos of sage, never used it myself...<br>\nThe other is that perhaps it could be easier with the formal def of a category to look at presheaves in the form of discrete fibrations?</p>",
        "id": 199724168,
        "sender_full_name": "[Mod] Morgan Rogers",
        "timestamp": 1591263741
    },
    {
        "content": "<p>I don't think it does precisely what you want, but <a href=\"https://homalg-project.github.io/CAP_project/\">CAP</a> may be relevant in this topic. It's a variant of the GAP computer algebra system, but for categories instead of groups.</p>",
        "id": 200152731,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1591648561
    },
    {
        "content": "<p>CAP looks really interesting, but the documentation seems pretty confusing, I guess especially if one is not fully indoctrinated into GAP already. Do you know of any simpler tutorials or explanations on this? <a href=\"https://homalg-project.github.io/CAP_project/CAP/doc/chap0.html\">https://homalg-project.github.io/CAP_project/CAP/doc/chap0.html</a></p>\n<p>(e.g. the first example says that you can take a thing called LeftPresentations on some other thing and that gives a category, but its not evident why one would know this from the docs: <a href=\"https://homalg-project.github.io/CAP_project/CAP/doc/chap11.html\">https://homalg-project.github.io/CAP_project/CAP/doc/chap11.html</a>)</p>",
        "id": 200265074,
        "sender_full_name": "Gershom",
        "timestamp": 1591724423
    },
    {
        "content": "<p>thank you for the link. -e update: i found a jupyter workbook in one of the co-author's websites, i think it meets the \"simpler tutorials or expo\" bogie.</p>",
        "id": 201565944,
        "sender_full_name": "eric brunner-williams (uoregon)",
        "timestamp": 1592797722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295459\">@eric brunner-williams (uoregon)</span> Sounds good, could you post the link?</p>",
        "id": 201577770,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1592813483
    },
    {
        "content": "<p>of course.<br>\n<a href=\"https://sebastianpos.github.io/Try-out-CAP/\">https://sebastianpos.github.io/Try-out-CAP/</a></p>",
        "id": 201613703,
        "sender_full_name": "eric brunner-williams (uoregon)",
        "timestamp": 1592836773
    },
    {
        "content": "<p>thanks!</p>",
        "id": 201630146,
        "sender_full_name": "Jens Hemelaer",
        "timestamp": 1592844030
    }
]