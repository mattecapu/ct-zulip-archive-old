[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276047\">@Alex Gryzlov</span> this is certainly due to my lack of Haskell knowledge, and the order of evaluations for statements I suppose, but I guess I'm getting stuck on the second step. I get <code>pure</code> will apply <code>F</code> to it's argument, but how are you reaching the 2nd step? I.e why is <code>pure foo &lt;*&gt; x : F (b -&gt; c)</code>? <code>&lt;*&gt;</code> takes a a first parameter of type <code>f (a -&gt; b)</code> and <code>foo</code> doesn't fit that signature</p>",
        "id": 251966712,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630724029
    },
    {
        "content": "<p>Nor does <code>pure foo</code></p>",
        "id": 251966766,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630724074
    },
    {
        "content": "<p>Or can you apply pattern matching to the signatures? i.e is it true that <code>F ( a-&gt; b -&gt; c) = F (a -&gt; (b -&gt; c)) </code> and so then we can use <code>b -&gt; c </code> as the argument <code>b</code>   in <code>&lt;*&gt;</code>? I thought Haskell was exact with the type signatures, so wasn't sure if you could substitute a signature for a function where there is a signature of a single type. If that makes sense</p>",
        "id": 251973154,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630731299
    },
    {
        "content": "<p>Perhaps this post by Bartosz Milewski on Applicative Functors will help? <a href=\"https://bartoszmilewski.com/2017/02/06/applicative-functors/\">https://bartoszmilewski.com/2017/02/06/applicative-functors/</a></p>",
        "id": 251975700,
        "sender_full_name": "Henry Story",
        "timestamp": 1630734442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364022\">Kale Evans</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/functors.20in.20haskell/near/251973154\">said</a>:</p>\n<blockquote>\n<p>Or can you apply pattern matching to the signatures? i.e is it true that <code>F ( a-&gt; b -&gt; c) = F (a -&gt; (b -&gt; c)) </code> and so then we can use <code>b -&gt; c </code> as the argument <code>b</code>   in <code>&lt;*&gt;</code>? I thought Haskell was exact with the type signatures, so wasn't sure if you could substitute a signature for a function where there is a signature of a single type. If that makes sense</p>\n</blockquote>\n<p>It's not pattern matching, but simply a convention of right-associativity.</p>",
        "id": 252030204,
        "sender_full_name": "Alex Gryzlov",
        "timestamp": 1630794148
    },
    {
        "content": "<p>A function type is still a type so it can be substituted.</p>",
        "id": 252030305,
        "sender_full_name": "Alex Gryzlov",
        "timestamp": 1630794275
    },
    {
        "content": "<p>Just to clarify a bit further, what <span class=\"user-mention\" data-user-id=\"276047\">@Alex Gryzlov</span> means is that the function arrow <code>-&gt;</code> associates to the right. So when you write <code>a -&gt; b -&gt; c</code> you implicitly mean <code>a -&gt; (b -&gt; c)</code> (always)</p>",
        "id": 252192444,
        "sender_full_name": "Nick Hu",
        "timestamp": 1630942602
    },
    {
        "content": "<p>Function application associates to the left, so when you write <code>f x y</code> you implicitly mean <code>(f x) y</code></p>",
        "id": 252192496,
        "sender_full_name": "Nick Hu",
        "timestamp": 1630942635
    },
    {
        "content": "<p>As to your original question, here is a skeleton of the answer (fill in the ???) in equational proof style</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">liftA2</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"ow\">=</span> <span class=\"p\">{</span> <span class=\"n\">definition</span> <span class=\"kr\">of</span> <span class=\"n\">liftA2</span> <span class=\"p\">(</span><span class=\"n\">https</span><span class=\"kt\">://</span><span class=\"n\">hackage</span><span class=\"o\">.</span><span class=\"n\">haskell</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">package</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"o\">-</span><span class=\"mf\">4.15</span><span class=\"o\">.</span><span class=\"mf\">0.0</span><span class=\"o\">/</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"kt\">GHC</span><span class=\"o\">-</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"o\">#</span><span class=\"n\">liftA2</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"p\">((</span><span class=\"o\">&lt;*&gt;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"n\">y</span>\n<span class=\"ow\">=</span> <span class=\"p\">{</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"kr\">infix</span> <span class=\"p\">}</span>\n<span class=\"nf\">fmap</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">y</span>\n<span class=\"ow\">=</span> <span class=\"p\">{</span> <span class=\"o\">???</span> <span class=\"p\">}</span>\n<span class=\"nf\">pure</span> <span class=\"n\">f</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 252193152,
        "sender_full_name": "Nick Hu",
        "timestamp": 1630942991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280859\">@Nick Hu</span> So <code>fmap f x &lt;*&gt; y :: f c</code>? Using <code>g :: a-&gt; (b-&gt;c)</code>, I arrive as <code>fmap g :: f a -&gt; f(b-&gt;c)</code>, then <code>fmap g x :: f(b-&gt;c)</code>, and finally <code>fmap g x &lt;*&gt; y :: f c</code></p>",
        "id": 252404960,
        "sender_full_name": "Kale Evans",
        "timestamp": 1631075598
    },
    {
        "content": "<p>You can't work out everything just by eyeballing the types (but this is usually good intuition). Every well-formed equation has a term with the same type on both its left and right side. And certainly just because two terms have the same type does not mean that they are equal, e.g. <code>True :: Bool</code>, and <code>False :: Bool</code>, but we would have big problems if <code>True = False</code></p>",
        "id": 252418141,
        "sender_full_name": "Nick Hu",
        "timestamp": 1631086212
    },
    {
        "content": "<p>But <code>fmap</code> isn't just <em>any</em> old function <code>(a -&gt; b) -&gt; f a -&gt; f b</code>; it's a special one that has to satisfy certain equations (called the functor laws). Similarly for <code>pure</code> and <code>&lt;*&gt;</code> too, and this is how you derive the answer to your question.</p>",
        "id": 252418381,
        "sender_full_name": "Nick Hu",
        "timestamp": 1631086373
    }
]