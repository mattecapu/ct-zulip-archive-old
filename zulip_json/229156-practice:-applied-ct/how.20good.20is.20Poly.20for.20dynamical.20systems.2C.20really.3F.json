[
    {
        "content": "<p>As much as I love the category, I'm noticing how bizarrely frustrating it is to write a mode-dependent dynamical systems (a reservoir computer in my case) using Poly constructs. When it comes to generating actual numbers for something nontrivial, debugging becomes a nightmare. It takes several minutes to do the plumbing necessary just to get the outer system to output information I can actually analyze.</p>\n<p>Something obvious only happened to occurr to me this week: there's nothing Poly can do that Set can't, really. A dynamical system is just a morphism? Great, it actually is just a morphism in Set also (albeit one that is a giant composition of functions). If you care about type safety, just write Haskell code and use Debug.trace when developing something.</p>\n<p>I'm asking this with love of course. I've been excited about the category and have loved working with it, but debugging it versus debugging a little matlab benchmark has caused some existential angst. \"Why is anyone even doing this? is it just a cute coincidence that if you take a subcategory of the yoneda embedding you preserve the ability to express dynamical systems? is this actually practical?\" etc.</p>",
        "id": 353931800,
        "sender_full_name": "André Muricy Santos",
        "timestamp": 1682695418
    },
    {
        "content": "<p>I love this question!</p>\n<p>... I probably have some things to say about it, but probably not until tomorrow</p>",
        "id": 353933261,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1682695564
    },
    {
        "content": "<p>i should note that I have been a programmer for 11 years and have only gotten into category theory about a year ago (and in a very leisurely way. watching bartosz lectures and \"reading\" topos blog posts without understanding anything). i'm sure i don't have the instincts that someone like Spivak has but i feel like by now I <em>should</em> have \"seen the light\" and somehow grasped how obviously better Poly is for expressing certain things (i.e. it actually is more natural/practical).</p>",
        "id": 353934268,
        "sender_full_name": "André Muricy Santos",
        "timestamp": 1682695679
    },
    {
        "content": "<p>It would be very helpful to know a bit more about what you're doing, ie. what kind of things you're modelling and why, and what language, libraries etc you're using</p>",
        "id": 354441243,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1682782873
    },
    {
        "content": "<p>I'd guess that quite a lot of your trouble is coming from the general phenomenon of compositional modelling being very hard at first. It's kinda like learning OOP all over again, except you have to invent all your own design patterns because nothing is standardised yet</p>",
        "id": 354441716,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1682782940
    },
    {
        "content": "<p>For comparison: I'm not using Poly, but I'm using categories of optics which are closely related and share many of the same features. We use Haskell with a hand-rolled implementation of optics, with the core stuff using optics but not hesitating to fall back to plain Haskell whenever it's more convenient for something</p>",
        "id": 354442598,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1682783081
    },
    {
        "content": "<p>The fact that all the data in Poly is \"really\" just data in Set is a general fact, if you push this to the extreme it becomes the straw-man argument \"why are you using language X, assembly/Fortran/C/etc is Turing complete so you can just work there\". At the other extreme there are also usually good reasons not to work in the most advanced language available (this fact applies to mathematics as well as software engineering!) - so everybody has to make a non-trivial engineering choice for these kind of tradeoffs</p>",
        "id": 354443965,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1682783286
    },
    {
        "content": "<p>I'll need some time to collect my thoughts in order to properly reply as well. in particular i want to actually finish this damn thing. will probably say more tomorrow <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 354489023,
        "sender_full_name": "André Muricy Santos",
        "timestamp": 1682791045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/how.20good.20is.20Poly.20for.20dynamical.20systems.2C.20really.3F/near/354443965\">said</a>:</p>\n<blockquote>\n<p>The fact that all the data in Poly is \"really\" just data in Set is a general fact, if you push this to the extreme it becomes the straw-man argument \"why are you using language X, assembly/Fortran/C/etc is Turing complete so you can just work there\". At the other extreme there are also usually good reasons not to work in the most advanced language available (this fact applies to mathematics as well as software engineering!) - so everybody has to make a non-trivial engineering choice for these kind of tradeoffs</p>\n</blockquote>\n<p>I do want to say that yes, i understand this, i didn't make my point very well very well. I guess i was attempting to contrast <em>the difficulty</em> i'm facing in actually writing code using Poly with <em>how naturally it \"claims\" to be able to represent the things im trying to represent</em>. I tend to roughly interpret \"this framework is good for expressing X\" as \"this framework has a very nice type system\", which is why i mentioned type safety in haskell.</p>",
        "id": 354490353,
        "sender_full_name": "André Muricy Santos",
        "timestamp": 1682791305
    },
    {
        "content": "<p>I'll point out this wouldn't be the case if one were working in a programming language which 'compiles' to Poly. Instead, atm one has to manually be the compiler and that impacts the practical appeal of Poly constructions. But this is not specific to Poly, but to every category whose internal language is simple and expressive but different from standard type theory.</p>",
        "id": 355269458,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1683063206
    },
    {
        "content": "<p>The real deal is programming <em>in</em> the categories one'd like to use, but that's mostly sci-fi currently</p>",
        "id": 355269514,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1683063238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/how.20good.20is.20Poly.20for.20dynamical.20systems.2C.20really.3F/near/355269458\">said</a>:</p>\n<blockquote>\n<p>I'll point out this wouldn't be the case if one were working in a programming language which 'compiles' to Poly. Instead, atm one has to manually be the compiler and that impacts the practical appeal of Poly constructions. But this is not specific to Poly, but to every category whose internal language is simple and expressive but different from standard type theory.</p>\n</blockquote>\n<p>What you are really saying here is that the bare minimum to make category theory useful in software applications is:</p>\n<ul>\n<li>Implementing the categorical machinery in some language (usually a functional one for peace of mind, but this is not strictly needed)</li>\n<li>Implementing a decent DSL to make the most of the given functionality.</li>\n</ul>\n<p>In general, any programmer will concur on the fact that the 'language' (or more appropriately 'the core machinery' in this case) is just the tip of the iceberg. There's a lot of stuff around it to make the language practically useful, the bare minimum probably being a linter, a packet manager, syntax highlighting, virtual envs etc.</p>\n<p>So 'we can do dynamical systems with Poly' won't be really 'we can do dynamical systems with Poly' until all these further pieces of the ecosystem are implemented. And that takes time.</p>",
        "id": 355273721,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1683065190
    },
    {
        "content": "<p>If you want a real-world example of how this looks in practice, take a look at Rust. Rust has probably the most well-developed infrastructure around at the moment, and represents a good standard of 'how these things should look like in the best possible scenario'. If you come from Haskell, which is already a language with a quite developed ecosystem, programming in Rust will basically feel like magic.</p>",
        "id": 355274192,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1683065407
    },
    {
        "content": "<p>I don't think this is necessarily always the case, depending on the host language and the structure you're implementing libraries can do just fine, for example AlgebraicJulia seems to do well</p>",
        "id": 355362669,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1683103706
    },
    {
        "content": "<p>Poly suffers from requiring either dependent types in the host, or rolling your own typechecker for a fragment of dependent type theory, or faking it (which comes with its own downsides)</p>",
        "id": 355362924,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1683103772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275901\">Jules Hedges</span> <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/how.20good.20is.20Poly.20for.20dynamical.20systems.2C.20really.3F/near/355362669\">said</a>:</p>\n<blockquote>\n<p>I don't think this is necessarily always the case, depending on the host language and the structure you're implementing libraries can do just fine, for example AlgebraicJulia seems to do well</p>\n</blockquote>\n<p>Well, if you have a DSL embedded in a language with a nice ecosystem, you can clearly leverage on that, but it is not always going to cut it. For instance, syntax highlighting will be missing for your DSL, as will be advanced debugging features.</p>",
        "id": 355395198,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1683110956
    },
    {
        "content": "<p>And yes, libraries can be fine but they sill have to be packaged in a way so that they can leverage the host language packet manager. Ideally, if Poly allows to represent dynamical systems, I'd like to have libraries of 'already battle-tested' dynamical systems that I can install by just using the host language packet manager from the command line. The alternative would be manually downloading them from this or that repo, which obviously also works, but the point of my comment was exactly that 'also works' may not necessarily mean 'having a nice development experience'.</p>",
        "id": 355395831,
        "sender_full_name": "Fabrizio Genovese",
        "timestamp": 1683111109
    },
    {
        "content": "<p>I followed a few of the poly courses,  and I was wondering if that maps well to actor systems? It seems to from afar, because poly allows nodes to have state, contain other nodes and change behavior. And nodes can be named I think and so composed.<br>\nActor systems such as Erlang or <a href=\"https://akka.io/\">akka</a> are similar to object oriented programming but can work in parallel. Instead of method calls one sends messages from one actor to another. In Akka each actor can change their behavior and spawn children, which can be thought of as contained in the parent actor. In akka actors are named with URLs allowing one to connect actors that were not previously connected.<br>\nI have a thread on actors here <a href=\"https://twitter.com/bblfish/status/1358103100104572930\">https://twitter.com/bblfish/status/1358103100104572930</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/bblfish/status/1358103100104572930\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/77b199c7e82b7b9c52e9d03926bbf1970d09fe5d/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313030343332363736313630383431373238312f486a786a533942585f6e6f726d616c2e6a7067\"></a><p>Really great overview of the history of computing and the emergence of the Actor model by Carl Hewitt. \"Actor Model of Computation: Scalable Robust Information Systems\"\n<a href=\"https://t.co/zRcLRboJwS\">https://arxiv.org/abs/1008.1459</a>\n( @ThePatHayes and <a href=\"https://twitter.com/v_sassone\">@v_sassone</a>'s works are cited)\n\"The Actor Model integrated:\" <a href=\"https://t.co/HM1UgmLWNL\">https://twitter.com/bblfish/status/1358103100104572930/photo/1</a></p><span>- The 🐠 BblFish (@bblfish)</span><div class=\"twitter-image\"><a href=\"https://t.co/HM1UgmLWNL\"><img src=\"https://uploads.zulipusercontent.net/f4e77d124215aa7d39b2d147ddd3d0d493683891/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f45746a79383665575941494f454c552e706e673a7468756d62\"></a></div></div></div>",
        "id": 355440723,
        "sender_full_name": "Henry Story",
        "timestamp": 1683120939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229156-practice.3A-applied-ct/topic/how.20good.20is.20Poly.20for.20dynamical.20systems.2C.20really.3F/near/355269458\">said</a>:</p>\n<blockquote>\n<p>I'll point out this wouldn't be the case if one were working in a programming language which 'compiles' to Poly. Instead, atm one has to manually be the compiler and that impacts the practical appeal of Poly constructions. But this is not specific to Poly, but to every category whose internal language is simple and expressive but different from standard type theory.</p>\n</blockquote>\n<p>Is Poly really that different than standard type theory?  Via things like \"Martin lof categories\" <a href=\"https://core.ac.uk/download/pdf/82087952.pdf\">https://core.ac.uk/download/pdf/82087952.pdf</a> using Poly to me seems a lot like just writing down inductive/coinductive types in e.g. Coq/NuPRL/etc.  In fact Josh Meyers is trying to prove things about Poly in Coq as we speak.  I'm guessing NuPRL will be a lot easier tho</p>",
        "id": 355806277,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1683213049
    },
    {
        "content": "<p>You can definitely interpret MLTT in Poly, but most of the interesting stuff in Poly makes use of the other, 'non-classical' structures (like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊗</mo></mrow><annotation encoding=\"application/x-tex\">\\otimes</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">⊗</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∘</mo></mrow><annotation encoding=\"application/x-tex\">\\circ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∘</span></span></span></span>). Those would require new syntax to be used with the same ease you use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Π</span></span></span></span>.<br>\nAlso there's the whole thing of the bidirectionality, which is an interesting programming design challenge (as <span class=\"user-mention\" data-user-id=\"275901\">@Jules Hedges</span> knows more than well)</p>",
        "id": 355862943,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1683226664
    },
    {
        "content": "<p>There is a nice \"notation\" mechanism in Coq to extend syntax, for example, you can use it to add monad comprehensions to Coq, which are SQL-like syntax. So now  I'm thinking adding Coq notations for those non-classical operations may be part of the contribution of the Coq development, thanks!</p>",
        "id": 355864324,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1683227087
    },
    {
        "content": "<p>If that works that'd be amazing!</p>",
        "id": 355865754,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1683227573
    },
    {
        "content": "<p>I assume it's not simply syntactic sugar you're talking about</p>",
        "id": 355865816,
        "sender_full_name": "Matteo Capucci (he/him)",
        "timestamp": 1683227591
    },
    {
        "content": "<p>Here's the documentation.   <a href=\"https://coq.github.io/doc/master/refman/user-extensions/syntax-extensions.html\">https://coq.github.io/doc/master/refman/user-extensions/syntax-extensions.html#</a>   Coupled with Coq's tactic language you can get pretty far with meta-programming in Coq, for example using Coq as a front end for verified programming in assembly language <a href=\"http://plv.csail.mit.edu/bedrock/\">http://plv.csail.mit.edu/bedrock/</a> .  Coq notation also was used to improve performance in existing formalizations of category theory in Coq, eg <a href=\"https://arxiv.org/abs/1401.7694\">https://arxiv.org/abs/1401.7694</a></p>",
        "id": 355899266,
        "sender_full_name": "Ryan Wisnesky",
        "timestamp": 1683240750
    }
]