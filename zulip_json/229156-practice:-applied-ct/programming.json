[
    {
        "content": "<p>Not sure if this is too practical for the Category Theory Zulip. <br>\nHere is a very nice talk <a href=\"https://www.youtube.com/watch?v=UlFAgD1NY-s\">Scale By The Bay 2018: Greg Pfeil, Duality and How to Delete Half (minus Îµ) of Your Code</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"UlFAgD1NY-s\" href=\"https://www.youtube.com/watch?v=UlFAgD1NY-s\"><img src=\"https://uploads.zulipusercontent.net/d8675620d8c360120ee9991dffe7714d9d3a5d5b/68747470733a2f2f692e7974696d672e636f6d2f76692f556c46416744314e592d732f64656661756c742e6a7067\"></a></div>",
        "id": 244301265,
        "sender_full_name": "Henry Story",
        "timestamp": 1624980873
    },
    {
        "content": "<p>I've worked with Greg in the past and meet with him regularly <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> he's been working at Kitty Hawk on compiling to categories in Haskell. They plan to open source it at some point soon <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 244334606,
        "sender_full_name": "Fintan Halpenny",
        "timestamp": 1624995023
    },
    {
        "content": "<p>Ah, so I wonder if the scala code he showed in that talk ended up in some library. It would be nice to be able to study it, and even use it...</p>",
        "id": 244342423,
        "sender_full_name": "Henry Story",
        "timestamp": 1624998307
    },
    {
        "content": "<p>I can ask him <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 244343525,
        "sender_full_name": "Fintan Halpenny",
        "timestamp": 1624998755
    },
    {
        "content": "<p>Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nNo hurry though: I am currently studying <a href=\"https://www.youtube.com/watch?v=IhzvLsvRO98\">Cofun with Cofree Comonads</a> an older Haskell talk with <a href=\"https://github.com/dalaing/cofun/blob/master/blog/posts/free_and_cofree.md\">a blog post</a> to go with it.<br>\nI am hoping I'll slowly  get the theory I have been learning over the past few years to start composing with the coding skills.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"IhzvLsvRO98\" href=\"https://www.youtube.com/watch?v=IhzvLsvRO98\"><img src=\"https://uploads.zulipusercontent.net/ad589516816ba0a8a2c6e4f4f183513aa73a2c49/68747470733a2f2f692e7974696d672e636f6d2f76692f49687a764c7376524f39382f64656661756c742e6a7067\"></a></div>",
        "id": 244344659,
        "sender_full_name": "Henry Story",
        "timestamp": 1624999280
    },
    {
        "content": "<p>Here's the repo for dualizing :) <a href=\"https://github.com/sellout/dualizer\">https://github.com/sellout/dualizer</a></p>",
        "id": 244400156,
        "sender_full_name": "Fintan Halpenny",
        "timestamp": 1625046906
    },
    {
        "content": "<p>nice username</p>",
        "id": 244401706,
        "sender_full_name": "Nick Hu",
        "timestamp": 1625047877
    },
    {
        "content": "<p>This reminds me of the general theme of exploiting symmetry groups to reduce complexity.</p>",
        "id": 244464631,
        "sender_full_name": "Jon Awbrey",
        "timestamp": 1625076286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"343030\">Fintan Halpenny</span> <a href=\"#narrow/stream/229156-practice.3A-applied.20ct/topic/programming/near/244400156\">said</a>:</p>\n<blockquote>\n<p>Here's the repo for dualizing :) <a href=\"https://github.com/sellout/dualizer\">https://github.com/sellout/dualizer</a></p>\n</blockquote>\n<p>Thanks, very interesting!<br>\nIt looks like the Scala code was more of a sketch, and the full code is in Haskell. <br>\nPerhaps with Scala3 now out, someone will follow up on these ideas there too. That would be interesting,</p>",
        "id": 244464903,
        "sender_full_name": "Henry Story",
        "timestamp": 1625076412
    },
    {
        "content": "<p>Over on <a href=\"https://discord.com/channels/632277896739946517/839263668478672937/860478811580530720\">Discord (Scala) Cats Theory channel</a> zhukpauk asked:</p>\n<blockquote>\n<p>Can someone recommend something to read to understand the difference between types and classes in scala? I am not experienced that much with OOP and getting confused when reading theory about classes and types, where they differ, where they similar, when they should be used etc. Even haskell types were less confusing to me than this</p>\n</blockquote>\n<p>I answered the following (it seems a good hypothesis):</p>\n<blockquote>\n<p>One way to think of them is that they are the same.<br>\nAnother way, could be to think of classes as duals to types perhaps, in that classes are coalgebraic and types algebraic, or classes are codata types as opposed to data types. So classes in Java are specified by their interfaces, which can have multiple implementations. As long as those implementations agree on what is visible and what results they give when interacted with they are the same, or more precisely bisimilar. Look at the papers in the list <a href=\"https://web-cats.gitlab.io/Cats/Intro.html\">I cited above</a> by Bart Jacobs.</p>\n</blockquote>",
        "id": 244693319,
        "sender_full_name": "Henry Story",
        "timestamp": 1625228012
    },
    {
        "content": "<p>Ah well one of the answers point to this being actually a distinction that has already been worked on, and I was just trying to guess at that distinction. </p>\n<blockquote>\n<p>A type is a compile time label that statically proves the absence of certain behavior. A class is a runtime tag that is used for dispatch<br>\nSome features work at runtime in terms of classes, eg pattern matching or overriding. Other work at compile time in terms of types, eg implicit resolution or overloading. If you want a haskell comparison, data constructors in haskell are like classes, and types are... Well types</p>\n</blockquote>\n<p>Here is <a href=\"https://typelevel.org/blog/2017/02/13/more-types-than-classes.html\">an article on types being more than classes</a>...</p>",
        "id": 244694819,
        "sender_full_name": "Henry Story",
        "timestamp": 1625228832
    },
    {
        "content": "<p>Anyone here who is familiar with haskell have an example of an instance of a functor whose second argument doesn't have to be type constructor for a collection type? </p>\n<p>Essentially, I am trying to see if a functor as defined in haskell is only relevant over collections, as opposed to the category theoretic definition, which of course works across all categories. </p>\n<p>In other words, It appears the functor in Haskell only moves you from a particular category to the category of containers of the objects of the first Category.</p>",
        "id": 251509920,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630478200
    },
    {
        "content": "<p>I hope this makea sense</p>",
        "id": 251509932,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630478212
    },
    {
        "content": "<p>\"Collection\" is a bit of an informal word and almost anything can look like a collection if you squint hard enough, but in general you can build examples from function types, for example the reader monad <code>a -&gt; x</code> and the continuation monad <code>(x -&gt; a) -&gt; a</code> (both for fixed <code>a</code>)</p>",
        "id": 251527614,
        "sender_full_name": "Jules Hedges",
        "timestamp": 1630487866
    },
    {
        "content": "<p>I believe <code>Functor</code> in Haskell only allows you to describe endofunctors of <code>Hask</code>, or something like that</p>",
        "id": 251552620,
        "sender_full_name": "Nick Hu",
        "timestamp": 1630500977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280859\">@Nick Hu</span> Yeah, I've read that a <code>Functor</code> in Haskell  is really only an endofunctor.</p>",
        "id": 251661700,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630554137
    },
    {
        "content": "<p><a href=\"/user_uploads/21317/GeWgOT8ELNV_9gd_qs7nRgIk/0ACD58F1-7FBB-4381-A7CE-D60438F8A436.jpg\">0ACD58F1-7FBB-4381-A7CE-D60438F8A436.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/21317/GeWgOT8ELNV_9gd_qs7nRgIk/0ACD58F1-7FBB-4381-A7CE-D60438F8A436.jpg\" title=\"0ACD58F1-7FBB-4381-A7CE-D60438F8A436.jpg\"><img src=\"/user_uploads/21317/GeWgOT8ELNV_9gd_qs7nRgIk/0ACD58F1-7FBB-4381-A7CE-D60438F8A436.jpg\"></a></div>",
        "id": 251822583,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630644731
    },
    {
        "content": "<p>^ I'm trying to understand applicatives and having a tough time. Could someone please explain to me how the above functions are equivalent?</p>",
        "id": 251822608,
        "sender_full_name": "Kale Evans",
        "timestamp": 1630644771
    },
    {
        "content": "<p>Presumably <code>foo : a -&gt; b -&gt; c</code>, <code>x : F a</code>, <code>y : F b</code>, then <code>pure foo : F (a -&gt; b -&gt; c)</code>, <code>pure foo &lt;*&gt; x : F (b -&gt; c)</code>, <code>pure foo &lt;*&gt; x &lt;*&gt; y : F c</code></p>",
        "id": 251852475,
        "sender_full_name": "Alex Gryzlov",
        "timestamp": 1630662409
    }
]