[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276777\">Mike Shulman</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/extensive.20categories.20in.20constructive.20mathematics/near/378969233\">said</a>:</p>\n<blockquote>\n<p>I'm not entirely sure what you mean by \"internal sets\", but it is constructively true in the category of sets that 1 is connected in this sense.</p>\n</blockquote>\n<p>Thanks, I will try my luck with the coproduct over the equality type!  I am actually using your stack semantics, so by internal set I mean sth in a fiber of the self indexing (or a splitting of the self indexing) of some base category.</p>",
        "id": 379168244,
        "sender_full_name": "Nico Beck",
        "timestamp": 1690465945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"386922\">Graham Manuell</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/extensive.20categories.20in.20constructive.20mathematics/near/378955256\">said</a>:</p>\n<blockquote>\n<p>I don't know if Proposition 3.1 is true constructively or not, but in general, I imagine the definition of extensivity that asks the canonical map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><mi>C</mi><mi mathvariant=\"normal\">/</mi><msub><mi>X</mi><mi>i</mi></msub><mo>→</mo><mi>C</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msub><mo>∐</mo><mi>i</mi></msub><msub><mi>X</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_i C/X_i \\to C/(\\coprod_i X_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.162em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> to be an equivalence is the right one. The nlab gives 4 equivalent definitions of (infinitary) <a href=\"https://ncatlab.org/nlab/show/extensive%20category\">[[extensive category]]</a> and all but the first one should still work constructively. Possibly there is even a way to phrase disjointness that makes sense constructively, but I don't know what it is.</p>\n</blockquote>\n<p>You are right, this version works of extensive categories works well! I should have thought about it a bit longer before asking a question. I wonder if this definition is constructively equivalent to \"coproducts are preserved by pullbacks\" + \"intersections are disjoint\" (in Mike Shulman's version above) <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 379169291,
        "sender_full_name": "Nico Beck",
        "timestamp": 1690466120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"623456\">Nico Beck</span> has marked this topic as resolved.</p>",
        "id": 379175045,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690466991
    },
    {
        "content": "<p>What is a \"sth\"?  You've used it twice but that's not an English word I know.</p>",
        "id": 379189031,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1690469058
    },
    {
        "content": "<p>An abbreviation of \"something\", I guess.   I imagine people who write a lot of text messages use this.</p>",
        "id": 379190098,
        "sender_full_name": "John Baez",
        "timestamp": 1690469241
    },
    {
        "content": "<p>Luckily I'm retired so I have a lot of spare time and can write whole words.</p>",
        "id": 379190417,
        "sender_full_name": "John Baez",
        "timestamp": 1690469292
    },
    {
        "content": "<p>o i c</p>",
        "id": 379192077,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1690469558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"623456\">Nico Beck</span> <a href=\"#narrow/stream/229136-theory.3A-category-theory/topic/.E2.9C.94.20extensive.20categories.20in.20constructive.20mathematics/near/379169291\">said</a>:</p>\n<blockquote>\n<p>I wonder if this definition is constructively equivalent to \"coproducts are preserved by pullbacks\" + \"intersections are disjoint\" (in Mike Shulman's version above)</p>\n</blockquote>\n<p>I'm 99% sure it is, and 98% sure the same proof should work (with appropriate constructive modifications), but I don't have time to check it myself right now.</p>",
        "id": 379192579,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1690469645
    }
]