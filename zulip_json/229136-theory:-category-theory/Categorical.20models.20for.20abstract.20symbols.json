[
    {
        "content": "<p>I would like to find a categorical models for the programming langauge feature described below, which I call <strong>symbols</strong>. This idea is discussed in Part XIII of \"Practical Foundations for Programming Languages\" by Robert Harper, but I don't currently know whether my formulation below is equivalent to his.</p>\n<p>There is some countably infinite type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span></span></span></span> of symbols. This type has decidable equality; there is some function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">_</mi><mo>=</mo><mi mathvariant=\"normal\">_</mi><mo>:</mo><mi mathvariant=\"script\">S</mi><mo>→</mo><mrow><mi mathvariant=\"monospace\">B</mi><mi mathvariant=\"monospace\">o</mi><mi mathvariant=\"monospace\">o</mi><mi mathvariant=\"monospace\">l</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\_=\\_ : \\mathcal{S} \\to \\mathtt{Bool}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6769em;vertical-align:-0.31em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7406em;vertical-align:-0.31em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6111em;\"></span><span class=\"mord\"><span class=\"mord mathtt\">Bool</span></span></span></span></span> which determines whether two symbols are the same. Besides this, symbols have no internal structure (i.e. no structure available to the user of the language). Since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">_</mi><mo>=</mo><mi mathvariant=\"normal\">_</mi></mrow><annotation encoding=\"application/x-tex\">\\_=\\_</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6769em;vertical-align:-0.31em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;vertical-align:-0.31em;\"></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span></span> is the only primitive function available which eliminates symbols, all deterministic functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">S</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{S} \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> for any type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> should be <em>almost-everywhere constant</em>, i.e. constant on all but finitely many inputs.</p>\n<p>There is a special (nondeterministic) function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span>, which I pronounce \"symbolgen\". Each time <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span> is evaluated, it produces a fresh symbol (i.e. a symbol that has never been produced before). In this way, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span> can be seen as an idealization of the process of generating a random string of bits---so idealized that it is downright <em>impossible</em> to generate the same symbol twice.</p>\n<p>So...do you know of any categorical formulations of this feature or a similar one? Since it involves nondeterminism, it feels like it could be modeled by (something like) a Markov category, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span> interpreted as a single nondeterministic function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn mathvariant=\"bold\">1</mn><mo>→</mo><mi mathvariant=\"script\">S</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{1} \\to \\mathcal{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathbf\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.075em;\">S</span></span></span></span>. I am especially interested in how this feature would interact with standard programming language features, such as inductive types.</p>\n<p>To give a bit of context of this question...there are many purposes of this feature, but one of them is to serve as an abstract account of names (e.g. names of functions in a module system) which doesn't rely on some underlying structure, such as representing names as strings. Another application is to represent capabilities and access control explicitly---possession of a given symbol by a piece of code can indicate that that code is authorized to access certain information or modify data in a certain way. This is why it's important that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∙</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord\">∙</span></span></span></span> never yields the same symbol twice; if I generate a symbol to serve as a guard for some data I want to protect, I want to be sure that no one else will be able to generate that symbol later.</p>\n<p>If no references seem to surface,  then I'll sit down and puzzle through it myself, but I'm wondering if there is any existing work on this or a similar problem.</p>",
        "id": 386459486,
        "sender_full_name": "Ben Logsdon",
        "timestamp": 1692646000
    },
    {
        "content": "<p>Maybe not quite what you're looking for, but if you haven't seen them already you should look at <a href=\"https://ncatlab.org/nlab/show/nominal%20sets\">[[nominal sets]]</a>.</p>",
        "id": 386461212,
        "sender_full_name": "Spencer Breiner",
        "timestamp": 1692646838
    }
]