[
    {
        "content": "<p>Hi all,</p>\n<p>For the final lesson of the course, I'll be going over <strong>monads</strong> and their algebras, and why they come in handy for typing data in neural networks.  </p>\n<p>The time is <strong>Monday November 7th, 4PM UTC.</strong> The Zoom link is here: <a href=\"https://uva-live.zoom.us/j/83816139841\">https://uva-live.zoom.us/j/83816139841</a></p>\n<p>This lecture will help explain the use of monads in <a href=\"https://arxiv.org/abs/2203.15544\">Graph Neural Networks are Dynamic Programmers</a> (Dudzik and Veličković, NeurIPS 2022)</p>\n<p>See you all soon!<br>\nAndrew</p>",
        "id": 308274451,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1667752499
    },
    {
        "content": "<p>The youtube link is <a href=\"https://youtu.be/y16JDvRi8GU\">https://youtu.be/y16JDvRi8GU</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"y16JDvRi8GU\" href=\"https://youtu.be/y16JDvRi8GU\"><img src=\"https://uploads.zulipusercontent.net/4de4e94f52e3cc0407142056bfd15970ba5a7e5c/68747470733a2f2f692e7974696d672e636f6d2f76692f7931364a447652693847552f64656661756c742e6a7067\"></a></div>",
        "id": 308381061,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1667825214
    },
    {
        "content": "<p>Does anyone has a good reference for monads (or cat theory in general) uses in functional programming?</p>",
        "id": 308443627,
        "sender_full_name": "Alberto Colombo",
        "timestamp": 1667844200
    },
    {
        "content": "<p>someone has already recommended it but in case you didn't catch it you can get \"category theory for programmers\" by Bartosz Milewski</p>",
        "id": 308445060,
        "sender_full_name": "Jethro Djan",
        "timestamp": 1667844733
    },
    {
        "content": "<p>I also like \"Learning functional programming\" by Jack Wedman. Chapter 3 has some info on monads translate practically in FP</p>",
        "id": 308445996,
        "sender_full_name": "Jethro Djan",
        "timestamp": 1667845052
    },
    {
        "content": "<p>Hey I came across a cool workshop/conference on the use of monads in probability/statistics if anyone here wants to learn more stuff :P <a href=\"https://www.youtube.com/watch?v=3Da88Tgw_rM&amp;list=PLaILTSnVfqtIebAXFOcee9MvAyBwhIMyr&amp;index=1\">https://www.youtube.com/watch?v=3Da88Tgw_rM&amp;list=PLaILTSnVfqtIebAXFOcee9MvAyBwhIMyr&amp;index=1</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"3Da88Tgw_rM\" href=\"https://www.youtube.com/watch?v=3Da88Tgw_rM&amp;list=PLaILTSnVfqtIebAXFOcee9MvAyBwhIMyr&amp;index=1\"><img src=\"https://uploads.zulipusercontent.net/18eb027f07511082f23d10218ab3a4bad4a8592d/68747470733a2f2f692e7974696d672e636f6d2f76692f33446138385467775f724d2f64656661756c742e6a7067\"></a></div>",
        "id": 308488504,
        "sender_full_name": "Sichu Lu",
        "timestamp": 1667861642
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"553308\">@Andrew Dudzik</span> , I have a question regarding your talk. In the title you mention LSTMs, but they didn't really come back in the talk. I'm wondering how RNNs fit in the picture of list algebras.<br>\nIt seems like a RNN is like a general map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>R</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">[R] \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, but for this to be a proper algebra, it needs to be  composed of binary monoid multiplications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>×</mo><mi>R</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R \\times R \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, which is not what an RNN does, as it tracks a hidden state while processing the list. Is there an elegant way of adding a hidden state to the setup, so we can see an RNN as a monoid? Thanks!</p>",
        "id": 308531604,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1667892990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"543609\">@Sichu Lu</span> I believe you asked about  higher dimensional generalizations of algebras of a monad. Perhaps actegories are that. Here's a <a href=\"https://arxiv.org/abs/2203.16351\">survey</a> on those by <span class=\"user-mention\" data-user-id=\"275932\">@Matteo Capucci (he/him)</span> and <span class=\"user-mention\" data-user-id=\"276875\">@Bruno Gavranovic</span> .</p>",
        "id": 308534964,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1667894809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281702\">Pim de Haan</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.205.3A.20Monads/near/308531604\">said</a>:</p>\n<blockquote>\n<p>Hi <span class=\"user-mention silent\" data-user-id=\"553308\">Andrew Dudzik</span> , I have a question regarding your talk. In the title you mention LSTMs, but they didn't really come back in the talk. I'm wondering how RNNs fit in the picture of list algebras.<br>\nIt seems like a RNN is like a general map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>R</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">[R] \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, but for this to be a proper algebra, it needs to be  composed of binary monoid multiplications <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>×</mo><mi>R</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R \\times R \\to R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, which is not what an RNN does, as it tracks a hidden state while processing the list. Is there an elegant way of adding a hidden state to the setup, so we can see an RNN as a monoid? Thanks!</p>\n</blockquote>\n<p>Thanks, I intended to bring this up but it got lost in the mix.</p>\n<p>I think we can model a hidden state by a module for a monoid, i.e. an algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> for the writer monad <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mo>−</mo></mrow><annotation encoding=\"application/x-tex\">A \\times -</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is the monoid of updates.  Then we have an action <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A\\times M \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</p>\n<p>So we think of the input to an RNN a monoid given by a list type and the hidden state as a representation for it.  Let me know if I'm overlooking any details.</p>",
        "id": 308540548,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1667897334
    },
    {
        "content": "<p>Indeed, I think that would be an encoding RNN (using the terminology of <a href=\"https://colah.github.io/posts/2015-09-NN-Types-FP/\">this</a> blog post).<br>\nGetting a full encoding-decoding RNN takes a bit more work.</p>",
        "id": 308554652,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1667902691
    },
    {
        "content": "<p>Thanks, that makes sense! <br>\nThen is there an elegant way of thinking about the fold map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>A</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">[A] \\times M \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>?</p>",
        "id": 308558919,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1667904308
    },
    {
        "content": "<p>So let's use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> as above for the type of inputs, and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> be a monoid we use to handle updates.  I think we should have a set map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">R\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, which is equivalent to a monoid map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>R</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">[R]\\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, that interprets inputs as updates.  This is basically giving a presentation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> as a set of generators.</p>\n<p>This separates things into two concerns: 1) What is the structure of the \"update algebra\"? and 2) Which module/representation of that algebra are we using?  So for example, in the special case of invertible updates, this is like giving a presentation of a group and asking about its representations. (though if we want to work over vector spaces we should expand our group to a Hopf algebra)</p>",
        "id": 308562100,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1667905652
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 308572521,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1667909861
    }
]