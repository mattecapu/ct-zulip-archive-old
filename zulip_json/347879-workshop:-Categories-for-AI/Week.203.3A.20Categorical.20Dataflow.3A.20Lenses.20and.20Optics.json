[
    {
        "content": "<p>This is the official topic for the third lecture of the course: <strong>\"Categorical Dataflow: Optics and Lenses as data structures for backpropagation\"</strong></p>\n<p>As a reminder, by the end of this week you will:</p>\n<ul>\n<li>Understand the difference between a monoidal and a cartesian category</li>\n<li>Get comfortable using their formal graphical language: string diagrams</li>\n<li>Learn about lenses and optics, abstract interfaces for modelling bidirectional data flow</li>\n<li>See examples of lenses and optics modelling backpropagation, gradient descent, value iteration, and more</li>\n<li>Understand how the chain rule is a special case of lens composition</li>\n</ul>\n<p>This lecture will help explain key parts of the paper <a href=\"https://arxiv.org/abs/2103.01931\">Categorical Foundations of Gradient-Based Learning</a> (Cruttwell et al., ESOP 2022) and the accompanying <a href=\"https://www.brunogavranovic.com/posts/2021-03-03-Towards-Categorical-Foundations-Of-Neural-Networks.html\">blog post</a>.</p>",
        "id": 305111794,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666258572
    },
    {
        "content": "<p>The zoom link for the lecture is <a href=\"https://uva-live.zoom.us/j/83816139841\">https://uva-live.zoom.us/j/83816139841</a></p>",
        "id": 305112923,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1666259060
    },
    {
        "content": "<p>Hi all,</p>\n<p>I'm very excited for our third lecture of the course today! We'll take a look at monoidal categories, cartesian categories, lenses and optics, and see how these constructions help us understand various computation patterns happening inside neural networks. </p>\n<p>Here's some last minute information (also communicated in the Google groups email.)</p>\n<p>The lecture starts in little over 3 hours (at 4PM UK time) at the following Zoom link: <a href=\"https://uva-live.zoom.us/j/83816139841\">https://uva-live.zoom.us/j/83816139841</a> As before, it will be streamed to Youtube (<a href=\"https://www.youtube.com/watch?v=p4iRU4pBkCo\">https://www.youtube.com/watch?v=p4iRU4pBkCo</a>) and recorded.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"p4iRU4pBkCo\" href=\"https://www.youtube.com/watch?v=p4iRU4pBkCo\"><img src=\"https://uploads.zulipusercontent.net/384d4ffded355859cf9fa0bcb1421aa6e065b5cb/68747470733a2f2f692e7974696d672e636f6d2f76692f70346952553470426b436f2f64656661756c742e6a7067\"></a></div><p>The lecture is expected to last up to 2 hours (including Q&amp;A). There's a lot of ground to cover, and this will give us enough time thoroughly unpack these abstract constructions.</p>\n<p>See you soon!</p>",
        "id": 305800447,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666612164
    },
    {
        "content": "<p>We'll be starting in about 15 minutes! The lecture slides are available <a href=\"https://docs.google.com/presentation/d/1_ALpC-tDyiJkcdugkBnAXkDJB0_hcok8KuWn6zpv7-Q/edit?usp=sharing&amp;resourcekey=0-F7X6OLSLqQ9xKvQQuNH1bQ\">here</a>, though many slides have content that I plan to fill in during the lecture. After it's filled in I'll update the slides accordingly.</p>",
        "id": 305835755,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666622627
    },
    {
        "content": "<p>Is there a mistake on the zoom link, I clicked on it and it says it's scheduled for tomorrow?</p>",
        "id": 305837205,
        "sender_full_name": "Sichu Lu",
        "timestamp": 1666623075
    },
    {
        "content": "<p>The zoom link says meeting ID is expired. Is there a new link?</p>",
        "id": 305839935,
        "sender_full_name": "Nitin Kishore Sai Samala",
        "timestamp": 1666623756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"552948\">Nitin Kishore Sai Samala</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305839935\">said</a>:</p>\n<blockquote>\n<p>The zoom link says meeting ID is expired. Is there a new link?</p>\n</blockquote>\n<p>Works fine for me! Which link are you using?</p>",
        "id": 305840641,
        "sender_full_name": "Ieva Cepaite",
        "timestamp": 1666623919
    },
    {
        "content": "<p>The link should be <a href=\"https://uva-live.zoom.us/j/83816139841\">https://uva-live.zoom.us/j/83816139841</a></p>",
        "id": 305840677,
        "sender_full_name": "Pim de Haan",
        "timestamp": 1666623929
    },
    {
        "content": "<p>My Google calendar invite had this link <a href=\"https://uva-live.zoom.us/j/87524053828\">https://uva-live.zoom.us/j/87524053828</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"293509\">Ieva Cepaite</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305840641\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"552948\">Nitin Kishore Sai Samala</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305839935\">said</a>:</p>\n<blockquote>\n<p>The zoom link says meeting ID is expired. Is there a new link?</p>\n</blockquote>\n<p>Works fine for me! Which link are you using?</p>\n</blockquote>",
        "id": 305841277,
        "sender_full_name": "Nitin Kishore Sai Samala",
        "timestamp": 1666624081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"552948\">Nitin Kishore Sai Samala</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305841277\">said</a>:</p>\n<blockquote>\n<p>My Google calendar invite had this link <a href=\"https://uva-live.zoom.us/j/87524053828\">https://uva-live.zoom.us/j/87524053828</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"293509\">Ieva Cepaite</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305840641\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"552948\">Nitin Kishore Sai Samala</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305839935\">said</a>:</p>\n<blockquote>\n<p>The zoom link says meeting ID is expired. Is there a new link?</p>\n</blockquote>\n<p>Works fine for me! Which link are you using?<br>\n</p>\n</blockquote>\n</blockquote>\n<p>Ah okay, the one in the email is different, see Pim's reply above:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"281702\">Pim de Haan</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305840677\">said</a>:</p>\n<blockquote>\n<p>The link should be <a href=\"https://uva-live.zoom.us/j/83816139841\">https://uva-live.zoom.us/j/83816139841</a></p>\n</blockquote>",
        "id": 305841643,
        "sender_full_name": "Ieva Cepaite",
        "timestamp": 1666624164
    },
    {
        "content": "<p>Thanks to everyone for listening and asking questions! I'm sorry I didn't manage to answer all the questions, in the beginning my zoom chat was overloading with new information. I'm happy to answer them here.</p>\n<p>I think there was the most confusion about the kind graphical transformations that are allowed for monoidal categories.  This is certainly a nuanced point, and for now I'll just share the Categorical Quantum Information lecture slides I referred to in the course here, since I need a proper break after a 2h lecture <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 305876154,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666631693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305876154\">said</a>:</p>\n<blockquote>\n<p>Thanks to everyone for listening and asking questions! I'm sorry I didn't manage to answer all the questions, in the beginning my zoom chat was overloading with new information. I'm happy to answer them here.</p>\n<p>I think there was the most confusion about the kind graphical transformations that are allowed for monoidal categories.  This is certainly a nuanced point, and for now I'll just share the lecture slides here, since I need a proper break after a 2h lecture <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I'll share both the lecture notes and tutorials/solutions for the course (hopefully no one ends up taking Chris Heuenen's categorical quantum information course here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ). They're focused on quantum systems and qubits and such, but they have a lot of insights for monoidal categories! <a href=\"/user_uploads/21317/lwZTUxgcU65sWiLmK_n9tBeC/Categories.pdf\">Categories.pdf</a> <a href=\"/user_uploads/21317/P3b0RhOXqBcT4p4Sr5AShxcq/TutorialsSolutions.pdf\">TutorialsSolutions.pdf</a></p>",
        "id": 305876586,
        "sender_full_name": "Ieva Cepaite",
        "timestamp": 1666631859
    },
    {
        "content": "<p>Ah, I need to mention the context again that the whole exercise about sliding things around on a plane was taken from this course, so it might be helpful to read and compare/contrast</p>",
        "id": 305877071,
        "sender_full_name": "Ieva Cepaite",
        "timestamp": 1666632007
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Concerning the question about a homomorphic supply of monoids</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Is a symmetric monoidal category with a homomorphic supply of monoids isomorphic to a monoidal category whose monoidal product is the category-theoretic coproduct?</p>\n<p>Operationally I can see it as merging disjoint datatypes, but I find it less intuitive.</p>\n</div></div>",
        "id": 305910183,
        "sender_full_name": "Matthew Pugh",
        "timestamp": 1666643946
    },
    {
        "content": "<p>Could we please have access to the populated slides?</p>",
        "id": 305928791,
        "sender_full_name": "Alexandros Keros",
        "timestamp": 1666653097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553485\">Matthew Pugh</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305910183\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Concerning the question about a homomorphic supply of monoids</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Is a symmetric monoidal category with a homomorphic supply of monoids isomorphic to a monoidal category whose monoidal product is the category-theoretic coproduct?</p>\n<p>Operationally I can see it as merging disjoint datatypes, but I find it less intuitive.</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>I'm not very familiar with \"supply\" and I'm waiting on the populated slides to look at the definition, but I'm familiar with a different phrasing of this theorem, that every monoidal category has a \"universal cartesianization\" given by the category of comonoids, and dually a universal cocartesianization given by the category of monoids.  These two statements should be equivalent by dualizing.</p>\n<p>And yes, cocartesian categories are less intuitive than cartesian ones when you're used to working with sets and types.  Generally cartesian categories are more \"geometric\" and cocartesian ones are more \"algebraic\"; for example, the opposite of the category of sets with product is cocartesian, and it's equivalent to the category of complete atomic boolean algebras with tensor product.</p>\n<p>Tensor products of algebras provide a whole host of examples.  A favorite of mine is the category of commutative rings, where the tensor product is the categorical coproduct.  We can also look at abelian categories, e.g. the category of abelian groups with direct sum, which are both cartesian and cocartesian.</p>\n<p>I'll cover some of this in my lecture in 2 weeks.  I think of monoids in terms of data aggregation, so anything like a concatenation, a running total, or an RNN, should be a good place to look to understand cocartesian categories.</p>",
        "id": 305995858,
        "sender_full_name": "Andrew Dudzik",
        "timestamp": 1666692499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"552431\">Alexandros Keros</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305928791\">said</a>:</p>\n<blockquote>\n<p>Could we please have access to the populated slides?</p>\n</blockquote>\n<p>I'll have them up on the next day or two! I want to clean things up a bit</p>",
        "id": 306011338,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666699040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553485\">Matthew Pugh</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305910183\">said</a>:</p>\n<blockquote>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Concerning the question about a homomorphic supply of monoids</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Is a symmetric monoidal category with a homomorphic supply of monoids isomorphic to a monoidal category whose monoidal product is the category-theoretic coproduct?</p>\n<p>Operationally I can see it as merging disjoint datatypes, but I find it less intuitive.</p>\n<p></div></div><br>\n</p>\n</blockquote>\n<p>That's exactly right! Every object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>:</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">A : \\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> becomes a comonoid in a unique way, i.e. it becomes equipped with a unique map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">∇</mi><mi>A</mi></msub><mo>:</mo><mi>A</mi><mo>+</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">\\nabla_A : A  + A \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> \"merging\" two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>'s into one and a unique initial map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">0 \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>. This is what characterises cocartesian categories (category with a monoidal product given by coproduct): we can always systematically \"merge\" objects, and \"create\" objects (though I'm not too happy with this terminology)</p>",
        "id": 306012724,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666699549
    },
    {
        "content": "<p>Note that the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"bold\">E</mi><mi mathvariant=\"bold\">u</mi><mi mathvariant=\"bold\">c</mi></mrow><mo separator=\"true\">,</mo><mo>×</mo><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\mathbf{Euc}, \\times, 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">Euc</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">×</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> has a supply of monoids on every object given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\"application/x-tex\">+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> (i.e. it's a monoid given by addition with 0 as the netural element), but interestingly this supply is not homomorphic: given an arbitrary smooth function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">f : \\mathbb{R} \\to \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> it's not always the case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x + x) = f(x) + f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, and it's not always the case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f(0) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. This would imply all our functions are additive, when clearly we have things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(x)=x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> which violate this.</p>",
        "id": 306013792,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666699958
    },
    {
        "content": "<p>So depending on what kinds of things we study, we might encounter various supplies that may or may not be homomorphic.</p>",
        "id": 306013909,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666700006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553308\">Andrew Dudzik</span> <a href=\"#narrow/stream/347879-workshop.3A-Categories-for-AI/topic/Week.203.3A.20Categorical.20Dataflow.3A.20Lenses.20and.20Optics/near/305995858\">said</a>: </p>\n<blockquote>\n<p>I'm not very familiar with \"supply\" </p>\n</blockquote>\n<p>The terminology of \"supply\" arises from Fong &amp; Spivak's <a href=\"https://arxiv.org/abs/1908.02633\">Supplying bells &amp; whistles in symmetric monoidal categories</a> paper.</p>",
        "id": 306013974,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1666700040
    }
]