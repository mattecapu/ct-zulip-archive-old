[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275932\">Matteo Capucci (he/him)</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/.22monoidal.20limit.22/near/265900663\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"378472\">Dylan Braithwaite</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/.22Monoidal.20limit.22/near/265873176\">said</a>:</p>\n<blockquote>\n<p>The codomain fibration existing (as opposed to just the codomain opfibration) implies the existence of pullbacks, but that maybe isn’t what we should be focusing on when thinking about dependent lenses. It just happens to be what’s required to define the reindexing functor for that fibration.</p>\n</blockquote>\n<p>I agree with this sentiment, it seems a bit of an accident that in the codomain fibration (aka the slice indexing) pullbacks give you both local monoidal structure <em>and</em> reindexing operations. The two things could be formally unrelated, with the only requirement reindexing should be compatible with the local monoidal structure (i.e. 'the pasting lemma holds')</p>\n</blockquote>\n<p>Yeah, this resonates with me too. It would be very surprising if codomain fibration is somehow central to dependent lenses. After all, the fibration corresponding to the slice functor is the one that defines dependent lenses: having a different fibration play a central role would be strange.</p>\n<blockquote>\n<p>If you decided products should become monoidal products in this generalisation, then 'products in a slice category' should become 'monoidal products in a slice category', no?</p>\n</blockquote>\n<p>Yeah! But here's where I'm stuck at: if pullbacks in the base correspond to products in the slice, then what construction in the base gives us monoidal products in the slice?</p>",
        "id": 266212876,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640646316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276875\">Bruno Gavranovic</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/.22monoidal.20limit.22/near/266212876\">said</a>:</p>\n<blockquote>\n<p>It would be very surprising if codomain fibration is somehow central to dependent lenses. After all, the fibration corresponding to the slice functor is the one that defines dependent lenses: having a different fibration play a central role would be strange.</p>\n</blockquote>\n<p>I’m not sure if I’m understanding correctly what you’re saying here, but the codomain fibration <em>is</em> the fibration corresponding to the slice functor</p>",
        "id": 266213366,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640646730
    },
    {
        "content": "<p>Huh, what? Are you saying that the indexed category corresponding to the codomain fibration is the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi><mi mathvariant=\"normal\">/</mi><mo>−</mo><mo>:</mo><msup><mi mathvariant=\"script\">C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>→</mo><mrow><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C} / - : \\mathcal{C}^{op} \\to \\mathbf{Cat}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mord\">/</span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Cat</span></span></span></span></span>?</p>",
        "id": 266213506,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640646869
    },
    {
        "content": "<p>Yes, that's right.</p>",
        "id": 266213561,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1640646933
    },
    {
        "content": "<p>Okay, I thought these were different things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  I also now see on nLab the slice functor is mentioned practically in the beginning, I don't know how I've missed that...</p>",
        "id": 266213650,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640646994
    },
    {
        "content": "<p>Where the codomain fibration in this context is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">A</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Arr}(\\mathcal C) \\to \\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Arr</span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span> as opposed to the one we have also been working with that maps onto the delooping</p>",
        "id": 266213658,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640647003
    },
    {
        "content": "<p>But something is confusing to me, if the fibration is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">A</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Arr}(\\mathcal{C}) \\to \\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Arr</span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>, this means the total space is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">A</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Arr}(\\mathcal{C})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Arr</span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mclose\">)</span></span></span></span>. But we know that applying the Grothendieck construction to the slice functor gives us dependent lenses, and dep. lenses are not equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">A</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Arr}(\\mathcal{C}) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Arr</span></span><span class=\"mopen\">(</span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 266213811,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640647152
    },
    {
        "content": "<p>Applying the grothendieck construction to the <strong>opposite of</strong> the slice functor gives us dependent lenses</p>",
        "id": 266213900,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640647207
    },
    {
        "content": "<p>Ie the codomain fibration is the fibrewise opposite of the view fibration</p>",
        "id": 266213953,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640647286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378472\">Dylan Braithwaite</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/.22monoidal.20limit.22/near/266213900\">said</a>:</p>\n<blockquote>\n<p>Applying the grothendieck construction to the <strong>opposite of</strong> the slice functor gives us dependent lenses</p>\n</blockquote>\n<p>You mean \"pointwise opposite\", right?</p>",
        "id": 266214027,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640647330
    },
    {
        "content": "<p>Yeah</p>",
        "id": 266214040,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640647354
    },
    {
        "content": "<p>Okay, this might explain my confusion. So this is fibrewise opposite of the view fibration, as you say. That makes sense!</p>",
        "id": 266214137,
        "sender_full_name": "Bruno Gavranovic",
        "timestamp": 1640647468
    },
    {
        "content": "<p>The thing that Matteo and I were saying seems like a coincidence is that reindexing is the same thing as taking a product in the fibres of this fibration. So when you want to generalise pullbacks, you have to decide whether you’re trying to generalise the operation of reindexing or of taking a product in the fibres.</p>",
        "id": 266214340,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640647656
    },
    {
        "content": "<p>I don't think it's good to say that reindexing is the same thing as taking a (ahem) fibre product. There is a type error here! But you can take the pushforward of the reindexing and then you really do get two objects in the same fibre that are naturally isomorphic.</p>",
        "id": 266214960,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1640648237
    },
    {
        "content": "<p>I think the indexed monoidal category of modules over commutative rings is instructive as a non-cartesian example. But here too there is a natural isomorphism between pushforward-of-reindexing and the tensor product, albeit with some difference in handedness...</p>",
        "id": 266215179,
        "sender_full_name": "Zhen Lin Low",
        "timestamp": 1640648444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416301\">Zhen Lin Low</span> <a href=\"#narrow/stream/229199-learning.3A-questions/topic/.22monoidal.20limit.22/near/266214960\">said</a>:</p>\n<blockquote>\n<p>I don't think it's good to say that reindexing is the same thing as taking a (ahem) fibre product. There is a type error here! But you can take the pushforward of the reindexing and then you really do get two objects in the same fibre that are naturally isomorphic.</p>\n</blockquote>\n<p>Right yeah, this is the issue I was trying to point at. When talking about dependent lenses they’re usually described in terms of pullbacks in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span>. But thinking about them in terms of the codomain fibration adds finer-grained typing. You have to decide whether the pullback is an instance of a reindexing or a product</p>",
        "id": 266215961,
        "sender_full_name": "Dylan Braithwaite",
        "timestamp": 1640648992
    }
]