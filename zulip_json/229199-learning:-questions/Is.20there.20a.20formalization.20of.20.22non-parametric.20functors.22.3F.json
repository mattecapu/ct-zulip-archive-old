[
    {
        "content": "<p>So, I've been trying to program so of the Category Theory programming concepts taught by Bartosz, but using Julia. One construction got me puzzled. In Haskell, we define functors by defining things like:</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"kr\">data</span><span class=\"w\"> </span><span class=\"kt\">Maybe</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"ow\">=</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kt\">Just</span><span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"nf\">fmap</span><span class=\"o\">...</span>\n</code></pre></div>\n<p>By defining the fmap we get <code>Maybe</code> to be a functor. The thing is, the <code>Maybe</code> functor takes a type <code>T</code> to a type<br>\n<code>Maybe T</code>. Now, in Julia, we can construct this <code>Maybe</code> functor with a parametric struct:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">Just</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">T</span>\n<span class=\"k\">end</span>\n<span class=\"k\">struct</span> <span class=\"kt\">Nothing</span><span class=\"w\"> </span><span class=\"k\">end</span>\n<span class=\"kt\">Maybe</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Just</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"kt\">Nothing</span><span class=\"p\">}</span>\n<span class=\"n\">fmap</span><span class=\"o\">...</span>\n</code></pre></div>\n<p>Yet, in Julia there is another possible construction. We can define a \"functor-like\" thing as the following:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"kt\">F</span>\n<span class=\"w\"> </span><span class=\"n\">a</span>\n<span class=\"k\">end</span>\n<span class=\"n\">fmap</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">F</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Such construction is actually called \"functor\" by programmers... But it seems that it is not an actual functor in terms of Category Theory.<br>\nThe reason for me saying this is that <code>F</code> takes types (sets) <code>T</code> to <code>F</code> and not to <code>F{T}</code>. Hence, if we think of types as sets, the type <code>F</code> would not be an actual set, as it seems to contain all other types, including itself...</p>\n<p>Is there any formal treatment of such construction? Is this actually a functor and I'm with the wrong interpretation?</p>",
        "id": 364980979,
        "sender_full_name": "Davi Sales Barreira",
        "timestamp": 1686349619
    }
]