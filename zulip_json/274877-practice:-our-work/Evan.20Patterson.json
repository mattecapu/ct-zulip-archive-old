[
    {
        "content": "<p>OK, I'm going to give this a shot.</p>\n<p>Two things that I just finished doing:</p>\n<ul>\n<li>Helped Angeline Aguinaldo write a short conference paper about a representation language for automated planning based on C-sets and DPO rewriting (not yet published)</li>\n<li>Wrote a <a href=\"https://topos.site/blog/2023/03/structured-cospans-as-a-cocartesian-equipment/\">blog post</a> about structured cospans as a cocartesian equipment</li>\n</ul>",
        "id": 342719112,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679122040
    },
    {
        "content": "<p>Some things that I'm currently working on:</p>\n<ul>\n<li>Revising a <a href=\"https://arxiv.org/abs/2301.01445\">paper</a> about biochemical regulatory networks from the AMS MRC on ACT, in preparation for journal submission</li>\n<li>Turning the series of blog post I've written about decorated and structured cospans into a paper for the ACT 2023 conference</li>\n<li>Starting to think about categorical statistics again, after a several year hiatus following my PhD thesis</li>\n</ul>",
        "id": 342719763,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679122247
    },
    {
        "content": "<p>What'll the focus be for your ACT2023 paper?  I'm always interested in structured and decorated cospans, and I gave two talks about them at ACT2022: one about turning structured cospans into decorated cospans, and another about StockFlow.jl.</p>",
        "id": 342863718,
        "sender_full_name": "John Baez",
        "timestamp": 1679190674
    },
    {
        "content": "<p>Thid time I might try to talk about ModelCollab, our new graphical user interface for StockFlow.jl, and some of the new math we came up with to give different choices of semantics for stock-flow duagrams.</p>",
        "id": 342864042,
        "sender_full_name": "John Baez",
        "timestamp": 1679190947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342864042\">said</a>:</p>\n<blockquote>\n<p>Thid time I might try to talk about ModelCollab, our new graphical user interface for StockFlow.js, and some of the new math we came up with to give different choices of semantics for stock-flow duagrams.</p>\n</blockquote>\n<p>Cool. I've been meaning to dig into that long new paper you wrote with Xiaoyan and others. Would be great to hear a talk about it.</p>",
        "id": 342885601,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679209069
    },
    {
        "content": "<p>BTW, I think you mean <a href=\"https://github.com/AlgebraicJulia/StockFlow.jl\">StockFlow.jl</a>, although as a web application, ModelCollab must have a JavaScript implementation of stock-flow diagrams one way or another.</p>",
        "id": 342885662,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679209123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342863718\">said</a>:</p>\n<blockquote>\n<p>What'll the focus be for your ACT2023 paper?</p>\n</blockquote>\n<p>The overall idea is to argue that using more concepts from double category theory is helpful for understanding structured and decorated cospans. The paper will be mostly based on two blog posts that I wrote over the past year or so. The <a href=\"https://topos.site/blog/2023/03/structured-cospans-as-a-cocartesian-equipment/\">recent post</a>, linked above, is about how structured cospans form a cocartesian double category, the doube-categorical analogue of a cocartesian category.</p>",
        "id": 342886237,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679209552
    },
    {
        "content": "<p>Previously, I wrote a <a href=\"https://topos.site/blog/2022/05/decorated-cospans-via-the-grothendieck-construction/\">blog post</a> about how decorated cospans can be derived as an application of the double Grothendieck construction. It's actually quite straightforward---the point is that, until very recently, nobody knew what the double Grothendieck construction was! (Or, at least, if people knew, it wasn't published anywhere.)</p>",
        "id": 342886591,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679209763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276120\">@Nicolas Blanco</span> have a talk about that Grothendieck construction recently, amongst others, it's exciting to learn that it's already got applications!</p>",
        "id": 342900977,
        "sender_full_name": "Morgan Rogers (he/him)",
        "timestamp": 1679217520
    },
    {
        "content": "<p>Yes, I meant .jl.   Fixed.   </p>\n<p><span class=\"user-mention silent\" data-user-id=\"275965\">Evan Patterson</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342886237\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342863718\">said</a>:<br>\nThe overall idea is to argue that using more concepts from double category theory is helpful for understanding structured and decorated cospans. The paper will be based mostly on two blog posts that I wrote over the past year or so. The <a href=\"https://topos.site/blog/2023/03/structured-cospans-as-a-cocartesian-equipment/\">recent post</a>, linked above, is about how structured cospans form a cocartesian double category, the double-categorical analogue of a cocartesian category.</p>\n</blockquote>",
        "id": 342974461,
        "sender_full_name": "John Baez",
        "timestamp": 1679250125
    },
    {
        "content": "<p>Great!  The way that Kenny Courser and I proved structured cospans are a symmetric monoidal double category used something <em>like</em> the fact that they're a cocartesian double category.</p>",
        "id": 342974589,
        "sender_full_name": "John Baez",
        "timestamp": 1679250209
    },
    {
        "content": "<p>As you know, double categories are \"weak category objects\" in Cat - that is, like category objects, but where composition is associative and unital only up to isomorphisms, which in turn obey equations like the pentagon identity.</p>",
        "id": 342974704,
        "sender_full_name": "John Baez",
        "timestamp": 1679250267
    },
    {
        "content": "<p><a href=\"https://arxiv.org/abs/1911.04630\">We showed</a> that structured cospan category objects are better: they are weak category objects in Rex, the 2-category of categories with finite colimits.  And we said this would be important!  </p>\n<p>But then we went ahead and showed they are also weak category objects in SymmMonCat, the 2-category of symmetric monoidal categories.  (This is easy.)   And using that, we showed they are symmetric monoidal double categories.   (This is <em>almost</em> easy.)</p>",
        "id": 342974975,
        "sender_full_name": "John Baez",
        "timestamp": 1679250442
    },
    {
        "content": "<p>When you say \"cocartesian\" do you mean \"with finite coproducts\" or \"with finite colimits\"?   I could check, but I'm too lazy.  I hope you mean the latter, and I bet you do, because that's much more useful for applications: it lets you \"glue together\" models of open systems.</p>",
        "id": 342975191,
        "sender_full_name": "John Baez",
        "timestamp": 1679250565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342974975\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://arxiv.org/abs/1911.04630\">We showed</a> that structured cospan category objects are better: they are weak category objects in Rex, the 2-category of categories with finite colimits.  And we said this would be important!  </p>\n</blockquote>\n<p>Right, that does seem important! I would like to understand how that statement is related to having certain double-categorical colimits. There is probably some connection.</p>",
        "id": 342990008,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679260505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"275920\">John Baez</span> <a href=\"#narrow/stream/274877-practice.3A-our-work/topic/Evan.20Patterson/near/342975191\">said</a>:</p>\n<blockquote>\n<p>When you say \"cocartesian\" do you mean \"with finite coproducts\" or \"with finite colimits\"?   I could check, but I'm too lazy.  I hope you mean the latter, and I bet you do, because that's much more useful for applications: it lets you \"glue together\" models of open systems.</p>\n</blockquote>\n<p>I actually mean finite double-categorical coproducts, which are sufficient to get a symmetric monoidal double category (just like finite coproducts are sufficient to get a symmetric monoidal category). I prove this under the assumption that the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>:</mo><mi mathvariant=\"sans-serif\">A</mi><mo>â†’</mo><mi mathvariant=\"sans-serif\">X</mi></mrow><annotation encoding=\"application/x-tex\">L: \\mathsf{A} \\to \\mathsf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathsf\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">â†’</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathsf\">X</span></span></span></span> preserves finite coproducts. Under stronger assumptions, it is probably possible to prove something stronger.</p>",
        "id": 342990220,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679260666
    },
    {
        "content": "<blockquote>\n<p>I actually mean finite double-categorical coproducts, which are sufficient to get a symmetric monoidal double category</p>\n</blockquote>\n<p>Is there a reference for this already?</p>",
        "id": 342999108,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1679267443
    },
    {
        "content": "<p>That is a fair point. I don't know a reference for this statement. So, as it stands, there is a little gap in my argument. I suppose I might have to write out a proof, although I'd really prefer to cite something instead.</p>",
        "id": 343022220,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679286385
    },
    {
        "content": "<p>On second thought, this should be true by abstract nonsense. A (co)cartesian double category can be defined as a (co)cartesian object in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">D</mi><mi mathvariant=\"bold\">b</mi><mi mathvariant=\"bold\">l</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Dbl}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Dbl</span></span></span></span></span>, whereas a symmetric monoidal double category is a symmetric pseudomonoid in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">D</mi><mi mathvariant=\"bold\">b</mi><mi mathvariant=\"bold\">l</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Dbl}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Dbl</span></span></span></span></span>. So it would suffice that for any 2-category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">C</span></span></span></span> with finite 2-products, a (co)cartesian object in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">C</span></span></span></span> is automatically a symmetric pseudomonoid in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">C</span></span></span></span> in a canonical way.</p>\n<p>Now I don't have a literature reference for that claim either, but the nLab page for <a href=\"https://ncatlab.org/nlab/show/cartesian+object\">cartesian object</a> says that it is true (although it doesn't specifically say \"symmetric\"). I would be grateful if anyone could provide a reference.</p>",
        "id": 343030425,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679292060
    },
    {
        "content": "<p>Considering only 2-categories of double categories will impose only a 1-dimensional monoidal structure, akin to a monoidal category rather than a monoidal bicategory. I would have expected it to be necessary to consider monoids in 3-categories instead, since a monoidal double category generalises a monoidal bicategory. (Though this depends on exactly how weak one needs the monoidal structure to be.)</p>",
        "id": 343104927,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1679315318
    },
    {
        "content": "<p>You might want to have a look at the appendix to the <a href=\"https://arxiv.org/abs/1911.04630\">Baez-Courser paper</a>, which helpfully unpacks the definition of a pseudomonoid in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">D</mi><mi mathvariant=\"bold\">b</mi><mi mathvariant=\"bold\">l</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Dbl}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Dbl</span></span></span></span></span>. In essence, this gives: the structure of a weak monoidal product on each of the underlying categories of the double category, which are strictly preserved by the source and target functors, along with coherent isomorphisms interchanging the monoidal product and unit with the external composition. IMO, this is the amount of weakness you would expect to have in a monoidal double category.</p>",
        "id": 343231701,
        "sender_full_name": "Evan Patterson",
        "timestamp": 1679348643
    },
    {
        "content": "<p>Okay, I see, that's a stricter notion than I was expecting (i.e. asking for structural isomorphisms rather than structural equivalences). I don't know of a reference for cartesian objects being pseudomonoids.</p>",
        "id": 343237264,
        "sender_full_name": "Nathanael Arkor",
        "timestamp": 1679351005
    }
]